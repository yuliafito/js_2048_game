{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static gameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    static getInitialState() {\n        return [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    constructor(initialState = $a5fd07fa01589658$var$Game.getInitialState()){\n        this.initialState = JSON.parse(JSON.stringify(initialState));\n        this.state = initialState;\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === $a5fd07fa01589658$var$Game.gameStatus.idle) {\n            this.status = $a5fd07fa01589658$var$Game.gameStatus.playing;\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    restart() {\n        this.score = 0;\n        this.state = this.initialState;\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n    }\n    mergeAndSlideRow(row) {\n        const nonEmptyValues = row.filter((value)=>value);\n        const mergedRow = [];\n        for(let i = 0; i < nonEmptyValues.length; i++)if (nonEmptyValues[i] === nonEmptyValues[i + 1]) {\n            mergedRow.push(nonEmptyValues[i] * 2);\n            this.score += nonEmptyValues[i] * 2;\n            i++;\n        } else mergedRow.push(nonEmptyValues[i]);\n        return mergedRow.concat(Array(4 - mergedRow.length).fill(0));\n    }\n    moveLeft() {\n        if (this.status !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        const originalState = JSON.stringify(this.state);\n        this.state = this.state.map((row)=>this.mergeAndSlideRow(row));\n        if (JSON.stringify(this.state) !== originalState) {\n            this.addRandomTile();\n            this.updateStatus();\n        }\n    }\n    moveRight() {\n        if (this.status !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        const originalState = JSON.stringify(this.state);\n        this.state = this.state.map((row)=>{\n            const reversedRow = [\n                ...row\n            ].reverse();\n            const mergedRow = this.mergeAndSlideRow(reversedRow);\n            return mergedRow.reverse();\n        });\n        if (JSON.stringify(this.state) !== originalState) {\n            this.addRandomTile();\n            this.updateStatus();\n        }\n    }\n    moveUp() {\n        if (this.status !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        const originalState = JSON.stringify(this.state);\n        const transposedState = this.transpose(this.state);\n        this.state = transposedState.map((row)=>this.mergeAndSlideRow(row));\n        this.state = this.transpose(this.state);\n        if (JSON.stringify(this.state) !== originalState) {\n            this.addRandomTile();\n            this.updateStatus();\n        }\n    }\n    moveDown() {\n        if (this.status !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        const originalState = JSON.stringify(this.state);\n        this.state = this.transpose(this.state).map((column)=>{\n            const reversedColumn = column.reverse();\n            const mergedColumn = this.mergeAndSlideRow(reversedColumn);\n            return mergedColumn.reverse();\n        });\n        this.state = this.transpose(this.state);\n        if (JSON.stringify(this.state) !== originalState) {\n            this.addRandomTile();\n            this.updateStatus();\n        }\n    }\n    transpose(state) {\n        return state[0].map((_, i)=>state.map((row)=>row[i]));\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 0) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    updateStatus() {\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.gameStatus.win;\n                return;\n            }\n        }\n        if (!this.hasAvailableMoves()) this.status = $a5fd07fa01589658$var$Game.gameStatus.lose;\n    }\n    hasAvailableMoves() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.state[row][col] === 0) return true;\n            if (col < 3 && this.state[row][col] === this.state[row][col + 1]) return true;\n            if (row < 3 && this.state[row][col] === this.state[row + 1][col]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nfunction $09e991522ca7e64e$var$updateField() {\n    const field = $09e991522ca7e64e$var$game.getState();\n    const fieldRows = document.querySelectorAll(\".field-row\");\n    fieldRows.forEach((row, rowIndex)=>{\n        const cells = row.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, cellIndex)=>{\n            const value = field[rowIndex][cellIndex];\n            cell.setAttribute(\"class\", \"field-cell\");\n            cell.textContent = \"\";\n            if (value !== 0) {\n                cell.classList.add(`field-cell--${value}`);\n                cell.textContent = value;\n            }\n        });\n    });\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$updateGameMessages();\n}\nfunction $09e991522ca7e64e$var$updateGameMessages() {\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case $a5fd07fa01589658$exports.gameStatus.win:\n            $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            break;\n        case $a5fd07fa01589658$exports.gameStatus.lose:\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n            break;\n        case $a5fd07fa01589658$exports.gameStatus.idle:\n            $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n            break;\n    }\n}\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.playing) {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$updateField();\n    }\n});\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.idle) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.replace(\"start\", \"restart\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$startButton.classList.replace(\"restart\", \"start\");\n    }\n    $09e991522ca7e64e$var$updateField();\n});\n\n\n//# sourceMappingURL=index.3e5f44fe.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst score = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nfunction updateField() {\n  const field = game.getState();\n  const fieldRows = document.querySelectorAll('.field-row');\n\n  fieldRows.forEach((row, rowIndex) => {\n    const cells = row.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, cellIndex) => {\n      const value = field[rowIndex][cellIndex];\n\n      cell.setAttribute('class', 'field-cell');\n      cell.textContent = '';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      }\n    });\n  });\n\n  score.textContent = game.getScore();\n  updateGameMessages();\n}\n\nfunction updateGameMessages() {\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  switch (game.getStatus()) {\n    case Game.gameStatus.win:\n      messageWin.classList.remove('hidden');\n      break;\n    case Game.gameStatus.lose:\n      messageLose.classList.remove('hidden');\n      break;\n    case Game.gameStatus.idle:\n      messageStart.classList.remove('hidden');\n      break;\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === Game.gameStatus.playing) {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    updateField();\n  }\n});\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === Game.gameStatus.idle) {\n    game.start();\n    startButton.textContent = 'Restart';\n    startButton.classList.replace('start', 'restart');\n  } else {\n    game.restart();\n    startButton.textContent = 'Start';\n    startButton.classList.replace('restart', 'start');\n  }\n\n  updateField();\n});\n","'use strict';\n\nclass Game {\n  static gameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  static getInitialState() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  constructor(initialState = Game.getInitialState()) {\n    this.initialState = JSON.parse(JSON.stringify(initialState));\n    this.state = initialState;\n    this.score = 0;\n    this.status = Game.gameStatus.idle;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === Game.gameStatus.idle) {\n      this.status = Game.gameStatus.playing;\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  restart() {\n    this.score = 0;\n    this.state = this.initialState;\n    this.status = Game.gameStatus.idle;\n  }\n\n  mergeAndSlideRow(row) {\n    const nonEmptyValues = row.filter((value) => value);\n    const mergedRow = [];\n\n    for (let i = 0; i < nonEmptyValues.length; i++) {\n      if (nonEmptyValues[i] === nonEmptyValues[i + 1]) {\n        mergedRow.push(nonEmptyValues[i] * 2);\n        this.score += nonEmptyValues[i] * 2;\n        i++;\n      } else {\n        mergedRow.push(nonEmptyValues[i]);\n      }\n    }\n\n    return mergedRow.concat(Array(4 - mergedRow.length).fill(0));\n  }\n\n  moveLeft() {\n    if (this.status !== Game.gameStatus.playing) {\n      return;\n    }\n\n    const originalState = JSON.stringify(this.state);\n\n    this.state = this.state.map((row) => this.mergeAndSlideRow(row));\n\n    if (JSON.stringify(this.state) !== originalState) {\n      this.addRandomTile();\n      this.updateStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== Game.gameStatus.playing) {\n      return;\n    }\n\n    const originalState = JSON.stringify(this.state);\n\n    this.state = this.state.map((row) => {\n      const reversedRow = [...row].reverse();\n      const mergedRow = this.mergeAndSlideRow(reversedRow);\n\n      return mergedRow.reverse();\n    });\n\n    if (JSON.stringify(this.state) !== originalState) {\n      this.addRandomTile();\n      this.updateStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== Game.gameStatus.playing) {\n      return;\n    }\n\n    const originalState = JSON.stringify(this.state);\n\n    const transposedState = this.transpose(this.state);\n\n    this.state = transposedState.map((row) => this.mergeAndSlideRow(row));\n    this.state = this.transpose(this.state);\n\n    if (JSON.stringify(this.state) !== originalState) {\n      this.addRandomTile();\n      this.updateStatus();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== Game.gameStatus.playing) {\n      return;\n    }\n\n    const originalState = JSON.stringify(this.state);\n\n    this.state = this.transpose(this.state).map((column) => {\n      const reversedColumn = column.reverse();\n      const mergedColumn = this.mergeAndSlideRow(reversedColumn);\n\n      return mergedColumn.reverse();\n    });\n\n    this.state = this.transpose(this.state);\n\n    if (JSON.stringify(this.state) !== originalState) {\n      this.addRandomTile();\n      this.updateStatus();\n    }\n  }\n\n  transpose(state) {\n    return state[0].map((_, i) => state.map((row) => row[i]));\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, col] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  updateStatus() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = Game.gameStatus.win;\n\n          return;\n        }\n      }\n    }\n\n    if (!this.hasAvailableMoves()) {\n      this.status = Game.gameStatus.lose;\n    }\n  }\n\n  hasAvailableMoves() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          return true;\n        }\n\n        if (col < 3 && this.state[row][col] === this.state[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && this.state[row][col] === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","gameStatus","idle","playing","win","lose","getInitialState","constructor","initialState","JSON","parse","stringify","state","score","status","getState","getScore","getStatus","start","addRandomTile","restart","mergeAndSlideRow","row","nonEmptyValues","filter","value","mergedRow","i","length","push","concat","Array","fill","moveLeft","originalState","map","updateStatus","moveRight","reversedRow","reverse","moveUp","transposedState","transpose","moveDown","column","reversedColumn","mergedColumn","_","emptyCells","col","Math","floor","random","hasAvailableMoves","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$score","document","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$updateField","field","fieldRows","querySelectorAll","forEach","rowIndex","cells","cell","cellIndex","setAttribute","textContent","classList","add","$09e991522ca7e64e$var$updateGameMessages","remove","addEventListener","e","key","replace"],"version":3,"file":"index.3e5f44fe.js.map"}